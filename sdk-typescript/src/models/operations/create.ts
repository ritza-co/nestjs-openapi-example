/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Create a pet cat or dog
 */
export type CreateRequestBody = components.Cat | components.Dog;

export type CreatePetsResponseBody = {};

export type CreateResponseBody = components.Cat | components.Dog;

export type CreateResponse =
  | CreatePetsResponseBody
  | components.Cat
  | components.Dog;

/** @internal */
export const CreateRequestBody$inboundSchema: z.ZodType<
  CreateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([components.Cat$inboundSchema, components.Dog$inboundSchema]);

/** @internal */
export type CreateRequestBody$Outbound =
  | components.Cat$Outbound
  | components.Dog$Outbound;

/** @internal */
export const CreateRequestBody$outboundSchema: z.ZodType<
  CreateRequestBody$Outbound,
  z.ZodTypeDef,
  CreateRequestBody
> = z.union([components.Cat$outboundSchema, components.Dog$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRequestBody$ {
  /** @deprecated use `CreateRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateRequestBody$inboundSchema;
  /** @deprecated use `CreateRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateRequestBody$outboundSchema;
  /** @deprecated use `CreateRequestBody$Outbound` instead. */
  export type Outbound = CreateRequestBody$Outbound;
}

export function createRequestBodyToJSON(
  createRequestBody: CreateRequestBody,
): string {
  return JSON.stringify(
    CreateRequestBody$outboundSchema.parse(createRequestBody),
  );
}

export function createRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRequestBody' from JSON`,
  );
}

/** @internal */
export const CreatePetsResponseBody$inboundSchema: z.ZodType<
  CreatePetsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreatePetsResponseBody$Outbound = {};

/** @internal */
export const CreatePetsResponseBody$outboundSchema: z.ZodType<
  CreatePetsResponseBody$Outbound,
  z.ZodTypeDef,
  CreatePetsResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePetsResponseBody$ {
  /** @deprecated use `CreatePetsResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreatePetsResponseBody$inboundSchema;
  /** @deprecated use `CreatePetsResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreatePetsResponseBody$outboundSchema;
  /** @deprecated use `CreatePetsResponseBody$Outbound` instead. */
  export type Outbound = CreatePetsResponseBody$Outbound;
}

export function createPetsResponseBodyToJSON(
  createPetsResponseBody: CreatePetsResponseBody,
): string {
  return JSON.stringify(
    CreatePetsResponseBody$outboundSchema.parse(createPetsResponseBody),
  );
}

export function createPetsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreatePetsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatePetsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatePetsResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateResponseBody$inboundSchema: z.ZodType<
  CreateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([components.Cat$inboundSchema, components.Dog$inboundSchema]);

/** @internal */
export type CreateResponseBody$Outbound =
  | components.Cat$Outbound
  | components.Dog$Outbound;

/** @internal */
export const CreateResponseBody$outboundSchema: z.ZodType<
  CreateResponseBody$Outbound,
  z.ZodTypeDef,
  CreateResponseBody
> = z.union([components.Cat$outboundSchema, components.Dog$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponseBody$ {
  /** @deprecated use `CreateResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateResponseBody$inboundSchema;
  /** @deprecated use `CreateResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateResponseBody$outboundSchema;
  /** @deprecated use `CreateResponseBody$Outbound` instead. */
  export type Outbound = CreateResponseBody$Outbound;
}

export function createResponseBodyToJSON(
  createResponseBody: CreateResponseBody,
): string {
  return JSON.stringify(
    CreateResponseBody$outboundSchema.parse(createResponseBody),
  );
}

export function createResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateResponse$inboundSchema: z.ZodType<
  CreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreatePetsResponseBody$inboundSchema),
  z.union([components.Cat$inboundSchema, components.Dog$inboundSchema]),
]);

/** @internal */
export type CreateResponse$Outbound =
  | CreatePetsResponseBody$Outbound
  | components.Cat$Outbound
  | components.Dog$Outbound;

/** @internal */
export const CreateResponse$outboundSchema: z.ZodType<
  CreateResponse$Outbound,
  z.ZodTypeDef,
  CreateResponse
> = z.union([
  z.lazy(() => CreatePetsResponseBody$outboundSchema),
  z.union([components.Cat$outboundSchema, components.Dog$outboundSchema]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse$ {
  /** @deprecated use `CreateResponse$inboundSchema` instead. */
  export const inboundSchema = CreateResponse$inboundSchema;
  /** @deprecated use `CreateResponse$outboundSchema` instead. */
  export const outboundSchema = CreateResponse$outboundSchema;
  /** @deprecated use `CreateResponse$Outbound` instead. */
  export type Outbound = CreateResponse$Outbound;
}

export function createResponseToJSON(createResponse: CreateResponse): string {
  return JSON.stringify(CreateResponse$outboundSchema.parse(createResponse));
}

export function createResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponse' from JSON`,
  );
}
